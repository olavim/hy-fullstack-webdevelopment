{"version":3,"sources":["../../../src/routes/api/users.js"],"names":["router","Router","get","request","response","users","find","passwordHash","populate","user","json","post","username","name","password","isAdult","body","length","status","message","existingUsers","hash","validate","err","savedUser","save","delete","id","params","findByIdAndRemove","put","findByIdAndUpdate","new"],"mappings":"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","file":"users.js","sourcesContent":["import express from 'express';\nimport bcrypt from 'bcrypt';\nimport asyncHandler from 'express-async-handler';\nimport User from '../../models/user';\n\nexport default () => {\n\tconst router = express.Router();\n\n\trouter.get('/', asyncHandler(async(request, response) => {\n\t\tconst users = await User.find({}, {passwordHash: 0}).populate('blogs', {user: 0});\n\t\tresponse.json(users);\n\t}));\n\n\trouter.post('/', asyncHandler(async(request, response) => {\n\t\tconst {username, name, password, isAdult} = request.body;\n\n\t\tif (!password || password.length < 3) {\n\t\t\tthrow {status: 400, message: 'Bad Request'};\n\t\t}\n\n\t\tconst existingUsers = await User.find({username});\n\t\tif (existingUsers.length > 0) {\n\t\t\tthrow {status: 400, message: 'Username Exists'};\n\t\t}\n\n\t\tconst passwordHash = await bcrypt.hash(password, 10);\n\t\tconst user = new User({username, name, passwordHash, isAdult});\n\n\t\ttry {\n\t\t\tawait user.validate();\n\t\t} catch (err) {\n\t\t\tthrow {status: 400, message: 'Bad Request'};\n\t\t}\n\n\t\tconst savedUser = await user.save();\n\t\tdelete savedUser.passwordHash;\n\t\tresponse.status(201).json(savedUser);\n\t}));\n\n\trouter.delete('/:id', asyncHandler(async(request, response) => {\n\t\tconst {id} = request.params;\n\t\ttry {\n\t\t\tawait User.findByIdAndRemove(id);\n\t\t} catch (err) {\n\t\t\tthrow {status: 400, message: 'Invalid id'};\n\t\t}\n\t\tresponse.status(204).json({message: 'deleted'});\n\t}));\n\n\trouter.put('/:id', asyncHandler(async(request, response) => {\n\t\tconst {id} = request.params;\n\t\tlet user;\n\n\t\ttry {\n\t\t\tuser = await User.findByIdAndUpdate(id, request.body, {new: true});\n\t\t} catch (err) {\n\t\t\tthrow {status: 400, message: 'Invalid id'};\n\t\t}\n\n\t\tif (!user) {\n\t\t\tthrow {status: 404, message: `Resource with id ${id} not found`};\n\t\t}\n\n\t\tresponse.status(201).json(user);\n\t}));\n\n\treturn router;\n};\n"]}