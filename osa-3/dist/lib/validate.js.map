{"version":3,"sources":["../../src/lib/validate.js"],"names":["resource","data","res","key","value","entries","field","validation","fields","find","f","name","generated","status","message","unique","some","r","type","num","parseFloat","isNaN","filter","required","hasOwnProperty"],"mappings":";;;;;;kBAEe,UAASA,QAAT,EAAmBC,IAAnB,EAAyB;AACvC,OAAMC,MAAM,EAAZ;;AAEA,MAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2B,iBAAEC,OAAF,CAAUJ,IAAV,CAA3B,EAA4C;AAC3C,QAAMK,QAAQN,SAASO,UAAT,CAAoBC,MAApB,CAA2BC,IAA3B,CAAgCC,KAAKA,EAAEC,IAAF,KAAWR,GAAhD,CAAd;;AAEA;AACA,MAAI,CAACG,KAAD,IAAUA,MAAMM,SAApB,EAA+B;AAC9B,SAAM,EAACC,QAAQ,GAAT,EAAcC,SAAU,qBAAoBX,GAAI,EAAhD,EAAN;AACA;;AAED;AACA,MAAIG,MAAMS,MAAV,EAAkB;AACjB,OAAIf,SAASC,IAAT,CAAce,IAAd,CAAmBC,KAAKA,EAAEd,GAAF,MAAWC,KAAnC,CAAJ,EAA+C;AAC9C,UAAM,EAACS,QAAQ,GAAT,EAAcC,SAAU,6CAA4CX,GAAI,EAAxE,EAAN;AACA;AACD;;AAED,UAAQG,MAAMY,IAAd;AACC,QAAK,QAAL;AACC,UAAMC,MAAMC,WAAWhB,KAAX,CAAZ;AACA,QAAIiB,MAAMF,GAAN,CAAJ,EAAgB;AACf,WAAM,EAACN,QAAQ,GAAT,EAAcC,SAAU,8BAA6BX,GAAI,mBAAzD,EAAN;AACA;;AAEDD,QAAIC,GAAJ,IAAWgB,GAAX;AACA;AACD;AACCjB,QAAIC,GAAJ,IAAWC,KAAX;AAVF;AAYA;;AAED;AACA,MAAK,MAAME,KAAX,IAAoBN,SAASO,UAAT,CAAoBC,MAApB,CAA2Bc,MAA3B,CAAkCZ,KAAKA,EAAEa,QAAzC,CAApB,EAAwE;AACvE,MAAI,CAACrB,IAAIsB,cAAJ,CAAmBlB,MAAMK,IAAzB,CAAL,EAAqC;AACpC,SAAM,EAACE,QAAQ,GAAT,EAAcC,SAAU,8BAA6BR,MAAMK,IAAK,EAAhE,EAAN;AACA;AACD;;AAED,QAAOT,GAAP;AACA,C;;AA1CD","file":"validate.js","sourcesContent":["import _ from 'lodash';\n\nexport default function(resource, data) {\n\tconst res = {};\n\n\tfor (const [key, value] of _.entries(data)) {\n\t\tconst field = resource.validation.fields.find(f => f.name === key);\n\n\t\t// Check that property is defined in validation\n\t\tif (!field || field.generated) {\n\t\t\tthrow {status: 400, message: `invalid property: ${key}`}\n\t\t}\n\n\t\t// Check unique\n\t\tif (field.unique) {\n\t\t\tif (resource.data.some(r => r[key] === value)) {\n\t\t\t\tthrow {status: 400, message: `unique constraint violation for property: ${key}`}\n\t\t\t}\n\t\t}\n\n\t\tswitch (field.type) {\n\t\t\tcase 'number':\n\t\t\t\tconst num = parseFloat(value);\n\t\t\t\tif (isNaN(num)) {\n\t\t\t\t\tthrow {status: 400, message: `invalid value for property ${key}: number expected`}\n\t\t\t\t}\n\n\t\t\t\tres[key] = num;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tres[key] = value;\n\t\t}\n\t}\n\n\t// Check required field existence\n\tfor (const field of resource.validation.fields.filter(f => f.required)) {\n\t\tif (!res.hasOwnProperty(field.name)) {\n\t\t\tthrow {status: 400, message: `missing required property: ${field.name}`};\n\t\t}\n\t}\n\n\treturn res;\n}"]}