{"version":3,"sources":["../../src/lib/list-utils.js"],"names":["dummy","blogs","totalLikes","reducer","sum","blog","likes","reduce","favouriteBlog","length","favourite","current","mostBlogs","authorMap","Map","prevNumBlogs","has","author","get","set","bestBlogger","Array","from","entries"],"mappings":";;;;;AAAO,MAAMA,wBAAQC,SAAS;AAC7B,QAAO,CAAP;AACA,CAFM;;AAIA,MAAMC,kCAAaD,SAAS;AAClC,OAAME,UAAU,CAACC,GAAD,EAAMC,IAAN,KAAeD,MAAMC,KAAKC,KAA1C;AACA,QAAOL,MAAMM,MAAN,CAAaJ,OAAb,EAAsB,CAAtB,CAAP;AACA,CAHM;;AAKA,MAAMK,wCAAgBP,SAAS;AACrC,KAAIA,MAAMQ,MAAN,KAAiB,CAArB,EAAwB;AACvB,SAAO,IAAP;AACA;;AAED,OAAMN,UAAU,CAACO,SAAD,EAAYC,OAAZ,KAAwBA,QAAQL,KAAR,GAAgBI,UAAUJ,KAA1B,GAAkCK,OAAlC,GAA4CD,SAApF;AACA,QAAOT,MAAMM,MAAN,CAAaJ,OAAb,EAAsBF,MAAM,CAAN,CAAtB,CAAP;AACA,CAPM;;AASA,MAAMW,gCAAYX,SAAS;AACjC,KAAIA,MAAMQ,MAAN,KAAiB,CAArB,EAAwB;AACvB,SAAO,IAAP;AACA;;AAED,OAAMI,YAAY,IAAIC,GAAJ,EAAlB;AACA,MAAK,MAAMT,IAAX,IAAmBJ,KAAnB,EAA0B;AACzB,QAAMc,eAAeF,UAAUG,GAAV,CAAcX,KAAKY,MAAnB,IAA6BJ,UAAUK,GAAV,CAAcb,KAAKY,MAAnB,CAA7B,GAA0D,CAA/E;AACAJ,YAAUM,GAAV,CAAcd,KAAKY,MAAnB,EAA2BF,eAAe,CAA1C;AACA;;AAED,OAAMZ,UAAU,CAACiB,WAAD,EAAc,CAACH,MAAD,EAAShB,KAAT,CAAd,KAAkC;AACjD,SAAOA,QAAQmB,YAAYnB,KAApB,GAA4B,EAACgB,MAAD,EAAShB,KAAT,EAA5B,GAA8CmB,WAArD;AACA,EAFD;;AAIA,QAAOC,MAAMC,IAAN,CAAWT,UAAUU,OAAV,EAAX,EAAgChB,MAAhC,CAAuCJ,OAAvC,EAAgD,EAACF,OAAO,CAAR,EAAhD,CAAP;AACA,CAhBM","file":"list-utils.js","sourcesContent":["export const dummy = blogs => {\n\treturn 1;\n};\n\nexport const totalLikes = blogs => {\n\tconst reducer = (sum, blog) => sum + blog.likes;\n\treturn blogs.reduce(reducer, 0);\n};\n\nexport const favouriteBlog = blogs => {\n\tif (blogs.length === 0) {\n\t\treturn null;\n\t}\n\n\tconst reducer = (favourite, current) => current.likes > favourite.likes ? current : favourite;\n\treturn blogs.reduce(reducer, blogs[0]);\n};\n\nexport const mostBlogs = blogs => {\n\tif (blogs.length === 0) {\n\t\treturn null;\n\t}\n\n\tconst authorMap = new Map();\n\tfor (const blog of blogs) {\n\t\tconst prevNumBlogs = authorMap.has(blog.author) ? authorMap.get(blog.author) : 0;\n\t\tauthorMap.set(blog.author, prevNumBlogs + 1);\n\t}\n\n\tconst reducer = (bestBlogger, [author, blogs]) => {\n\t\treturn blogs > bestBlogger.blogs ? {author, blogs} : bestBlogger;\n\t};\n\n\treturn Array.from(authorMap.entries()).reduce(reducer, {blogs: 0});\n};\n"]}